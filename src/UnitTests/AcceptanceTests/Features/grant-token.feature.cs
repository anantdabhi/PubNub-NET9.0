// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Grant an access token")]
    [NUnit.Framework.CategoryAttribute("featureSet=access")]
    public partial class GrantAnAccessTokenFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "featureSet=access"};
        
#line 1 "grant-token.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Grant an access token", "  As a PubNub customer I want to restrict and allow access to\r\n  specific PubNub " +
                    "resources (channels, channel groups, uuids)\r\n  by my user base (both people and " +
                    "devices) which are each\r\n  identified by a unique UUID.", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
  #line hidden
#line 9
    await testRunner.GivenAsync("I have a keyset with access manager enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Grant an access token with all permissions on all resource types with authorized " +
            "uuid")]
        [NUnit.Framework.CategoryAttribute("contract=grantAllPermissions")]
        public async System.Threading.Tasks.Task GrantAnAccessTokenWithAllPermissionsOnAllResourceTypesWithAuthorizedUuid()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=grantAllPermissions"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grant an access token with all permissions on all resource types with authorized " +
                    "uuid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
  await this.FeatureBackgroundAsync();
#line hidden
#line 14
    await testRunner.GivenAsync("the authorized UUID \"test-authorized-uuid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
    await testRunner.GivenAsync("the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
    await testRunner.GivenAsync("the \'channel-1\' CHANNEL resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
    await testRunner.AndAsync("grant resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 18
    await testRunner.AndAsync("grant resource permission WRITE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 19
    await testRunner.AndAsync("grant resource permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 20
    await testRunner.AndAsync("grant resource permission MANAGE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 21
    await testRunner.AndAsync("grant resource permission UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 22
    await testRunner.AndAsync("grant resource permission JOIN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 23
    await testRunner.AndAsync("grant resource permission DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 24
    await testRunner.GivenAsync("the \'channel_group-1\' CHANNEL_GROUP resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
    await testRunner.AndAsync("grant resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 26
    await testRunner.AndAsync("grant resource permission MANAGE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 27
    await testRunner.GivenAsync("the \'uuid-1\' UUID resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
    await testRunner.AndAsync("grant resource permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 29
    await testRunner.AndAsync("grant resource permission UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 30
    await testRunner.AndAsync("grant resource permission DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 31
    await testRunner.GivenAsync("the \'^channel-\\S*$\' CHANNEL pattern access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
    await testRunner.AndAsync("grant pattern permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 33
    await testRunner.AndAsync("grant pattern permission WRITE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 34
    await testRunner.AndAsync("grant pattern permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 35
    await testRunner.AndAsync("grant pattern permission MANAGE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 36
    await testRunner.AndAsync("grant pattern permission UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 37
    await testRunner.AndAsync("grant pattern permission JOIN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 38
    await testRunner.AndAsync("grant pattern permission DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 39
    await testRunner.GivenAsync("the \'^:channel_group-\\S*$\' CHANNEL_GROUP pattern access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
    await testRunner.AndAsync("grant pattern permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 41
    await testRunner.AndAsync("grant pattern permission MANAGE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 42
    await testRunner.GivenAsync("the \'^uuid-\\S*$\' UUID pattern access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
    await testRunner.AndAsync("grant pattern permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 44
    await testRunner.AndAsync("grant pattern permission UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 45
    await testRunner.AndAsync("grant pattern permission DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 46
    await testRunner.WhenAsync("I grant a token specifying those permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
    await testRunner.ThenAsync("the token contains the authorized UUID \"test-authorized-uuid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
    await testRunner.ThenAsync("the token contains the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    await testRunner.ThenAsync("the token has \'channel-1\' CHANNEL resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    await testRunner.AndAsync("token resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 51
    await testRunner.AndAsync("token resource permission WRITE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 52
    await testRunner.AndAsync("token resource permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 53
    await testRunner.AndAsync("token resource permission MANAGE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 54
    await testRunner.AndAsync("token resource permission UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 55
    await testRunner.AndAsync("token resource permission JOIN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 56
    await testRunner.AndAsync("token resource permission DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 57
    await testRunner.ThenAsync("the token has \'channel_group-1\' CHANNEL_GROUP resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
    await testRunner.AndAsync("token resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 59
    await testRunner.AndAsync("token resource permission MANAGE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 60
    await testRunner.ThenAsync("the token has \'uuid-1\' UUID resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    await testRunner.AndAsync("token resource permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 62
    await testRunner.AndAsync("token resource permission UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 63
    await testRunner.AndAsync("token resource permission DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 64
    await testRunner.ThenAsync("the token has \'^channel-\\S*$\' CHANNEL pattern access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
    await testRunner.AndAsync("token pattern permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 66
    await testRunner.AndAsync("token pattern permission WRITE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 67
    await testRunner.AndAsync("token pattern permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 68
    await testRunner.AndAsync("token pattern permission MANAGE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 69
    await testRunner.AndAsync("token pattern permission UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 70
    await testRunner.AndAsync("token pattern permission JOIN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 71
    await testRunner.AndAsync("token pattern permission DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 72
    await testRunner.ThenAsync("the token has \'^:channel_group-\\S*$\' CHANNEL_GROUP pattern access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    await testRunner.AndAsync("token pattern permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 74
    await testRunner.AndAsync("token pattern permission MANAGE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 75
    await testRunner.ThenAsync("the token has \'^uuid-\\S*$\' UUID pattern access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
    await testRunner.AndAsync("token pattern permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 77
    await testRunner.AndAsync("token pattern permission UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 78
    await testRunner.AndAsync("token pattern permission DELETE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Grant an access token without an authorized uuid")]
        [NUnit.Framework.CategoryAttribute("contract=grantWithoutAuthorizedUUID")]
        public async System.Threading.Tasks.Task GrantAnAccessTokenWithoutAnAuthorizedUuid()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=grantWithoutAuthorizedUUID"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grant an access token without an authorized uuid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
  await this.FeatureBackgroundAsync();
#line hidden
#line 82
    await testRunner.GivenAsync("the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
    await testRunner.GivenAsync("the \'channel-1\' CHANNEL resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
    await testRunner.AndAsync("grant resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 85
    await testRunner.WhenAsync("I grant a token specifying those permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
    await testRunner.ThenAsync("the token contains the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
    await testRunner.ThenAsync("the token does not contain an authorized uuid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
    await testRunner.ThenAsync("the token has \'channel-1\' CHANNEL resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
    await testRunner.AndAsync("token resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Grant an access token successfully with an authorized uuid")]
        [NUnit.Framework.CategoryAttribute("contract=grantWithAuthorizedUUID")]
        public async System.Threading.Tasks.Task GrantAnAccessTokenSuccessfullyWithAnAuthorizedUuid()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=grantWithAuthorizedUUID"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grant an access token successfully with an authorized uuid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
  await this.FeatureBackgroundAsync();
#line hidden
#line 93
    await testRunner.GivenAsync("the authorized UUID \"test-authorized-uuid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
    await testRunner.GivenAsync("the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
    await testRunner.GivenAsync("the \'channel-1\' CHANNEL resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
    await testRunner.AndAsync("grant resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 97
    await testRunner.WhenAsync("I grant a token specifying those permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
    await testRunner.ThenAsync("the token contains the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
    await testRunner.ThenAsync("the token contains the authorized UUID \"test-authorized-uuid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
    await testRunner.ThenAsync("the token has \'channel-1\' CHANNEL resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
    await testRunner.AndAsync("token resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to grant an access token with all permissions empty or false and expect a" +
            " server error")]
        [NUnit.Framework.CategoryAttribute("contract=grantWithoutAnyPermissionsError")]
        public async System.Threading.Tasks.Task AttemptToGrantAnAccessTokenWithAllPermissionsEmptyOrFalseAndExpectAServerError()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=grantWithoutAnyPermissionsError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to grant an access token with all permissions empty or false and expect a" +
                    " server error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
  await this.FeatureBackgroundAsync();
#line hidden
#line 105
    await testRunner.GivenAsync("the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
    await testRunner.GivenAsync("the \'uuid-1\' UUID resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 107
    await testRunner.AndAsync("deny resource permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 108
    await testRunner.WhenAsync("I attempt to grant a token specifying those permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
    await testRunner.ThenAsync("an error is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
    await testRunner.AndAsync("the error status code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 111
    await testRunner.AndAsync("the error message is \'Invalid permissions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 112
    await testRunner.AndAsync("the error source is \'grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 113
    await testRunner.AndAsync("the error detail message is \'Unexpected value: `permissions.resources.uuids.uuid-" +
                        "1` must be positive and non-zero.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 114
    await testRunner.AndAsync("the error detail location is \'permissions.resources.uuids.uuid-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 115
    await testRunner.AndAsync("the error detail location type is \'body\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to grant an access token with a regular expression containing a syntax er" +
            "ror and expect a server error")]
        [NUnit.Framework.CategoryAttribute("contract=grantWithRegExpSyntaxError")]
        public async System.Threading.Tasks.Task AttemptToGrantAnAccessTokenWithARegularExpressionContainingASyntaxErrorAndExpectAServerError()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=grantWithRegExpSyntaxError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to grant an access token with a regular expression containing a syntax er" +
                    "ror and expect a server error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
  await this.FeatureBackgroundAsync();
#line hidden
#line 119
    await testRunner.GivenAsync("the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
    await testRunner.GivenAsync("the \'!<[^>]+>++\' UUID pattern access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 121
    await testRunner.AndAsync("grant pattern permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 122
    await testRunner.WhenAsync("I attempt to grant a token specifying those permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
    await testRunner.ThenAsync("an error is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
    await testRunner.AndAsync("the error status code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 125
    await testRunner.AndAsync("the error message is \'Invalid RegExp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 126
    await testRunner.AndAsync("the error source is \'grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 127
    await testRunner.AndAsync("the error detail message is \'Syntax error: multiple repeat.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 128
    await testRunner.AndAsync("the error detail location is \'permissions.patterns.uuids.!<[^>]+>++\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 129
    await testRunner.AndAsync("the error detail location type is \'body\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to grant an access token with a regular expression containing capturing g" +
            "roups and expect a server error")]
        [NUnit.Framework.CategoryAttribute("contract=grantWithRegExpNonCapturingError")]
        public async System.Threading.Tasks.Task AttemptToGrantAnAccessTokenWithARegularExpressionContainingCapturingGroupsAndExpectAServerError()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=grantWithRegExpNonCapturingError"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to grant an access token with a regular expression containing capturing g" +
                    "roups and expect a server error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
  await this.FeatureBackgroundAsync();
#line hidden
#line 133
    await testRunner.GivenAsync("the TTL 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
    await testRunner.GivenAsync("the \'(!<[^>]+>)+\' UUID pattern access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 135
    await testRunner.AndAsync("grant pattern permission GET", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 136
    await testRunner.WhenAsync("I attempt to grant a token specifying those permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
    await testRunner.ThenAsync("an error is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
    await testRunner.AndAsync("the error status code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 139
    await testRunner.AndAsync("the error message is \'Invalid RegExp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 140
    await testRunner.AndAsync("the error source is \'grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 141
    await testRunner.AndAsync("the error detail message is \'Only non-capturing groups are allowed. Try replacing" +
                        " `(` with `(?:`.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 142
    await testRunner.AndAsync("the error detail location is \'permissions.patterns.uuids.(!<[^>]+>)+\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 143
    await testRunner.AndAsync("the error detail location type is \'body\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to grant an access token when ttl provided exceeds the max ttl configured" +
            " (use default max 43200 for the test)")]
        [NUnit.Framework.CategoryAttribute("contract=grantWithTTLExceedMaxTTL")]
        [NUnit.Framework.CategoryAttribute("beta")]
        public async System.Threading.Tasks.Task AttemptToGrantAnAccessTokenWhenTtlProvidedExceedsTheMaxTtlConfiguredUseDefaultMax43200ForTheTest()
        {
            string[] tagsOfScenario = new string[] {
                    "contract=grantWithTTLExceedMaxTTL",
                    "beta"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to grant an access token when ttl provided exceeds the max ttl configured" +
                    " (use default max 43200 for the test)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
  await this.FeatureBackgroundAsync();
#line hidden
#line 147
    await testRunner.GivenAsync("the TTL 43201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 148
    await testRunner.GivenAsync("the \'channel-1\' CHANNEL resource access permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 149
    await testRunner.AndAsync("grant resource permission READ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 150
    await testRunner.WhenAsync("I attempt to grant a token specifying those permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
    await testRunner.ThenAsync("an error is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
    await testRunner.AndAsync("the error status code is 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 153
    await testRunner.AndAsync("the error message is \'Invalid ttl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 154
    await testRunner.AndAsync("the error source is \'grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 155
    await testRunner.AndAsync("the error detail message is \'Range should be 1 to 43200 minute(s).\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 156
    await testRunner.AndAsync("the error detail location is \'ttl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 157
    await testRunner.AndAsync("the error detail location type is \'body\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
