// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests.Features.Encryption
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Crypto module")]
    [NUnit.Framework.CategoryAttribute("featureSet=cryptoModule")]
    [NUnit.Framework.CategoryAttribute("beta")]
    public partial class CryptoModuleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "featureSet=cryptoModule",
                "beta"};
        
#line 1 "cryptor-module.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Encryption", "Crypto module", "  As a PubNub user\r\n  I want to be able to encrypt data using crypto module\r\n  I " +
                    "want to be able to decrypt data generated by previous cryptors", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AES-CBC cryptor data header can be processed")]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-legacy-civ.jpg", "unknown cryptor error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-no-version.txt", "decryption error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-unknown-acrh.jpg", "unknown cryptor error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-v1-short.txt", "decryption error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-v1-unknown.txt", "unknown cryptor error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "empty-file-cryptor-v1-acrh.txt", "decryption error", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "file-cryptor-v1-acrh.jpg", "success", null)]
        public async System.Threading.Tasks.Task AES_CBCCryptorDataHeaderCanBeProcessed(string cipher_Key, string file, string outcome, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("file", file);
            argumentsOfScenario.Add("outcome", outcome);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AES-CBC cryptor data header can be processed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("Crypto module with \'acrh\' cryptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 10
    await testRunner.WhenAsync(string.Format("I decrypt \'{0}\' file", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    await testRunner.ThenAsync(string.Format("I receive \'{0}\'", outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty data encryption should fail")]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", null)]
        public async System.Threading.Tasks.Task EmptyDataEncryptionShouldFail(string cryptor_Id, string cipher_Key, string vector, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id", cryptor_Id);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty data encryption should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
    await testRunner.GivenAsync(string.Format("Crypto module with \'{0}\' cryptor", cryptor_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 40
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 41
    await testRunner.WhenAsync("I encrypt \'empty-file.txt\' file as \'binary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
    await testRunner.ThenAsync("I receive \'encryption error\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty stream data encryption should fail")]
        [NUnit.Framework.CategoryAttribute("na=rust")]
        [NUnit.Framework.CategoryAttribute("na=dart")]
        [NUnit.Framework.CategoryAttribute("na=ruby")]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", null)]
        public async System.Threading.Tasks.Task EmptyStreamDataEncryptionShouldFail(string cryptor_Id, string cipher_Key, string vector, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "na=rust",
                    "na=dart",
                    "na=ruby"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id", cryptor_Id);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty stream data encryption should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 55
    await testRunner.GivenAsync(string.Format("Crypto module with \'{0}\' cryptor", cryptor_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 57
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 58
    await testRunner.WhenAsync("I encrypt \'empty-file.txt\' file as \'stream\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
    await testRunner.ThenAsync("I receive \'encryption error\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty data decryption should fail")]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "empty-file-cryptor-legacy-riv.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "empty-file-cryptor-v1-acrh.txt", null)]
        public async System.Threading.Tasks.Task EmptyDataDecryptionShouldFail(string cryptor_Id, string cipher_Key, string vector, string encrypted_File, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id", cryptor_Id);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("encrypted_file", encrypted_File);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty data decryption should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 69
    await testRunner.GivenAsync(string.Format("Crypto module with \'{0}\' cryptor", cryptor_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 71
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 72
    await testRunner.WhenAsync(string.Format("I decrypt \'{0}\' file as \'binary\'", encrypted_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
    await testRunner.ThenAsync("I receive \'decryption error\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty stream data decryption should fail")]
        [NUnit.Framework.CategoryAttribute("na=rust")]
        [NUnit.Framework.CategoryAttribute("na=dart")]
        [NUnit.Framework.CategoryAttribute("na=ruby")]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "empty-file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "empty-file-cryptor-legacy-riv.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "empty-file-cryptor-v1-acrh.txt", null)]
        public async System.Threading.Tasks.Task EmptyStreamDataDecryptionShouldFail(string cryptor_Id, string cipher_Key, string vector, string encrypted_File, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "na=rust",
                    "na=dart",
                    "na=ruby"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id", cryptor_Id);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("encrypted_file", encrypted_File);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty stream data decryption should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 90
    await testRunner.GivenAsync(string.Format("Crypto module with \'{0}\' cryptor", cryptor_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 92
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 93
    await testRunner.WhenAsync(string.Format("I decrypt \'{0}\' file as \'stream\'", encrypted_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
    await testRunner.ThenAsync("I receive \'decryption error\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Data encrypted with legacy AES-CBC cryptor is decryptable with legacy implementat" +
            "ion")]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "constant", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "constant", "file.txt", null)]
        public async System.Threading.Tasks.Task DataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(string cipher_Key, string vector, string file, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("file", file);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data encrypted with legacy AES-CBC cryptor is decryptable with legacy implementat" +
                    "ion", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 108
    await testRunner.GivenAsync("Crypto module with \'legacy\' cryptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 110
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 111
    await testRunner.GivenAsync(string.Format("Legacy code with \'{0}\' cipher key and \'{1}\' vector", cipher_Key, vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
    await testRunner.WhenAsync(string.Format("I encrypt \'{0}\' file as \'binary\'", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
    await testRunner.ThenAsync("Successfully decrypt an encrypted file with legacy code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Stream data encrypted with legacy AES-CBC cryptor is decryptable with legacy impl" +
            "ementation")]
        [NUnit.Framework.CategoryAttribute("na=rust")]
        [NUnit.Framework.CategoryAttribute("na=dart")]
        [NUnit.Framework.CategoryAttribute("na=ruby")]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("pubnubenigma", "random", "file.txt", null)]
        public async System.Threading.Tasks.Task StreamDataEncryptedWithLegacyAES_CBCCryptorIsDecryptableWithLegacyImplementation(string cipher_Key, string vector, string file, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "na=rust",
                    "na=dart",
                    "na=ruby"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("file", file);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Stream data encrypted with legacy AES-CBC cryptor is decryptable with legacy impl" +
                    "ementation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 126
    await testRunner.GivenAsync("Crypto module with \'legacy\' cryptor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 127
    await testRunner.GivenAsync(string.Format("Legacy code with \'{0}\' cipher key and \'{1}\' vector", cipher_Key, vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 128
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 129
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 130
    await testRunner.WhenAsync(string.Format("I encrypt \'{0}\' file as \'stream\'", file), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
    await testRunner.ThenAsync("Successfully decrypt an encrypted file with legacy code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cryptor is able to process sample files as binary")]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "file-cryptor-legacy-civ.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-cryptor-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "file-cryptor-legacy-civ.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-cryptor-legacy-riv.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "file-legacy-civ.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "constant", "file-legacy-civ.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-legacy-riv.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "file-cryptor-v1-acrh.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "file-cryptor-v1-acrh.txt", "file.txt", null)]
        public async System.Threading.Tasks.Task CryptorIsAbleToProcessSampleFilesAsBinary(string cryptor_Id, string cipher_Key, string vector, string encrypted_File, string source_File, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id", cryptor_Id);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("encrypted_file", encrypted_File);
            argumentsOfScenario.Add("source_file", source_File);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cryptor is able to process sample files as binary", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 139
    await testRunner.GivenAsync(string.Format("Crypto module with \'{0}\' cryptor", cryptor_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 141
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 142
    await testRunner.WhenAsync(string.Format("I decrypt \'{0}\' file as \'binary\'", encrypted_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
    await testRunner.ThenAsync(string.Format("Decrypted file content equal to the \'{0}\' file content", source_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cryptor is able to process sample files as stream")]
        [NUnit.Framework.CategoryAttribute("na=rust")]
        [NUnit.Framework.CategoryAttribute("na=dart")]
        [NUnit.Framework.CategoryAttribute("na=ruby")]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-cryptor-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-cryptor-legacy-riv.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-legacy-riv.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("legacy", "pubnubenigma", "random", "file-legacy-riv.txt", "file.txt", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "file-cryptor-v1-acrh.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "pubnubenigma", "-", "file-cryptor-v1-acrh.txt", "file.txt", null)]
        public async System.Threading.Tasks.Task CryptorIsAbleToProcessSampleFilesAsStream(string cryptor_Id, string cipher_Key, string vector, string encrypted_File, string source_File, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "na=rust",
                    "na=dart",
                    "na=ruby"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id", cryptor_Id);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("encrypted_file", encrypted_File);
            argumentsOfScenario.Add("source_file", source_File);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cryptor is able to process sample files as stream", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 161
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 162
    await testRunner.GivenAsync(string.Format("Crypto module with \'{0}\' cryptor", cryptor_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 163
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 164
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 165
    await testRunner.WhenAsync(string.Format("I decrypt \'{0}\' file as \'stream\'", encrypted_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
    await testRunner.ThenAsync(string.Format("Decrypted file content equal to the \'{0}\' file content", source_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Crypto module can handle encrypted data from different cryptors")]
        [NUnit.Framework.TestCaseAttribute("legacy", "acrh", "pubnubenigma", "constant", "file-cryptor-legacy-civ.jpg", "file.jpg", null)]
        [NUnit.Framework.TestCaseAttribute("acrh", "legacy", "pubnubenigma", "random", "file-legacy-riv.jpg", "file.jpg", null)]
        public async System.Threading.Tasks.Task CryptoModuleCanHandleEncryptedDataFromDifferentCryptors(string cryptor_Id1, string cryptor_Id2, string cipher_Key, string vector, string encrypted_File, string source_File, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cryptor_id1", cryptor_Id1);
            argumentsOfScenario.Add("cryptor_id2", cryptor_Id2);
            argumentsOfScenario.Add("cipher_key", cipher_Key);
            argumentsOfScenario.Add("vector", vector);
            argumentsOfScenario.Add("encrypted_file", encrypted_File);
            argumentsOfScenario.Add("source_file", source_File);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Crypto module can handle encrypted data from different cryptors", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 177
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 178
    await testRunner.GivenAsync(string.Format("Crypto module with default \'{0}\' and additional \'{1}\' cryptors", cryptor_Id1, cryptor_Id2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 179
    await testRunner.AndAsync(string.Format("with \'{0}\' cipher key", cipher_Key), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 180
    await testRunner.AndAsync(string.Format("with \'{0}\' vector", vector), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 181
    await testRunner.WhenAsync(string.Format("I decrypt \'{0}\' file as \'binary\'", encrypted_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 182
    await testRunner.ThenAsync(string.Format("Decrypted file content equal to the \'{0}\' file content", source_File), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
